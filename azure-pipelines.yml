# Updated azure-pipelines.yml with TF_VAR_ prefix

trigger:
  branches:
    include:
      - main

pool:
  name: "SelfHostedUbuntu"

variables:
  - group: Terraform-SP-Credentials # Reference to your secure Variable Group

jobs:
  - job: "Deploy_AKS"
    displayName: "Provision AKS Cluster Using Terraform"
    steps:
      # Step 1: Checkout Code
      - checkout: self

      # Step 2: Verify Terraform Version
      - script: |
          terraform --version
        displayName: "Verify Installed Terraform Version"

      # Step 3: Terraform Init (Set Working Directory and Add TF_VAR_subscription_id)
      - script: |
          terraform init
        displayName: "Terraform Init"
        workingDirectory: $(System.DefaultWorkingDirectory)/terraform
        env:
          ARM_CLIENT_ID: $(appId)
          ARM_CLIENT_SECRET: $(password)
          ARM_TENANT_ID: $(tenant)
          ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
          TF_VAR_subscription_id: $(AZURE_SUBSCRIPTION_ID)  # Use TF_VAR_ prefix

      # Step 4: Terraform Plan (Set Working Directory and Add TF_VAR_subscription_id)
      - script: |
          terraform plan -out=tfplan
        displayName: "Terraform Plan"
        workingDirectory: $(System.DefaultWorkingDirectory)/terraform
        env:
          ARM_CLIENT_ID: $(appId)
          ARM_CLIENT_SECRET: $(password)
          ARM_TENANT_ID: $(tenant)
          ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
          TF_VAR_subscription_id: $(AZURE_SUBSCRIPTION_ID)  # Use TF_VAR_ prefix

      # Step 5: Terraform Apply (Set Working Directory)
      - script: |
          terraform apply -auto-approve tfplan
        displayName: "Terraform Apply"
        workingDirectory: $(System.DefaultWorkingDirectory)/terraform
        env:
          ARM_CLIENT_ID: $(appId)
          ARM_CLIENT_SECRET: $(password)
          ARM_TENANT_ID: $(tenant)
          ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)

      # Step 6: Configure kubectl for the New AKS Cluster
      - script: |
          az aks get-credentials --resource-group $(resource_group_name) --name $(kubernetes_cluster_name)
          kubectl get nodes
        displayName: "Configure kubectl and Verify Cluster"

      # Step 7: Log in to Azure using Service Principal (for `az aks browse` to work)
      - script: |
          az login --service-principal -u $(appId) -p $(password) --tenant $(tenant)
        displayName: "Authenticate Azure CLI Using Service Principal"

      # Step 8: Use `az aks browse` to Access the Dashboard
      - script: |
          az aks browse --resource-group $(resource_group_name) --name $(kubernetes_cluster_name)
        displayName: "Browse AKS Dashboard"
